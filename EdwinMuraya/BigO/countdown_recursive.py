def countdown_recursive(n):
    if n == 0:  # base case
        print("Blast off")
    else:
        print(n)
        countdown_recursive(n - 1)


# Recursive function keeps calling itself till a base condition (i.e. n == 0) is reached while the iterative function uses for loop to repeatedly execute a set of instruction

# The if statement takes constant time but the time taken by the recursive statement **countdown_recursive(n-1)** depends on the input.

# Recursive calls make use of the stack, so the larger the input value the bigger the stack.

# In the case of recursion, we can calcuate the time complexity by the use of a recursive tree which is generated by recursive calles. The recurrence equation of recursive tree is given as **T(n) = T(n-1) + T(n-2) + c**

# On solving the above recurrence equation, we get the time complexisty is O(2^n).

# For recursive function for smaller values of n is fasted but the iterative approach is faster for bigger values of n. The exponential behaviour seen in recursion is due to the nested calls and their corresponding stack overhead.
