# TOTAL ORDER

# [a, b, c]
# Reflexivity
  #  a <= a ; a>=a

# Antisymmetry
# a<=b b<=a : a=b
# a>=b b>=a : b=a

# Transitivity
# a=b b=c ; a=c
# a<=b b<=c : a<=c
# a>=b b>=c : a>=c

# ref + antsy +transit - partially ordered set

# Comparability

#  a > b > c

# previous<= latter (always)
# latter <= previous
# [0, 4, 9, 11, 12, 17, 17, 23]

# Card ordering
# shuffling - won/lost and money at stake

# storing - arrange them in some way
# separate according to shade, then arrange the shades
# go through the entire deck, putthe shades in separate according to the symbol
# put reds on top of blacks and back to the box
# JOKER > k,q,j >10..0>a
# f < s < d < h
# a < 0..10 < k,q,j

# [10F, KD, JOKER, 2H, 4H, 5S, AS, QH, 7D]
# [10F][KD, 7D][ JOKER][2H, 4H, QH][5S, AS]
# [10F][7D, KD][JOKER][2H, 4H, QH][AS, 5S]
# [10F, AS, 5S, 7D, KD, 2H, 4H, QH, JOKER]

# 10F <= AS <= 5S

# [5,8,2,6,74,1,5,8, 82]
# [5,8] key = 8
# [5,8,2] key = 2
# [5,2,8]
# [2, 5, 8]

def numSort(arrayN):
  # resArray = []

  # Insertion sort
  # [5,8,2]
  for i in range(1, len(arrayN)):  
    # i = 1 
    #  i = 2
    keyValue = arrayN[i]
    # keyValue 8
    # keyValue 2
    j = i - 1
    # j 0
    #  j 1

    # 8 < 5
    # 2 < 8
    # 2 < 5
    while j >= 0 and keyValue < arrayN[j]:
      # arrayN[2] 8 j=1
      # arrayN[1]= 5
      arrayN[j + 1] = arrayN[j]
      # arrayN[1] = 2
      # arrayN[0] = 2
      # arrayN[j] = keyValue
      # [5, 2, 8]
      # [2,5,8]
      j -= 1
      #  j = 0
      # j = -1
    arrayN[j + 1 ] = keyValue
    #################time complexity ---------------- O(n^2)time complexity grows quadiraticaly
    #################space complxity -----------------O(1)space complexity is constant

  #  bubble sort
  #  for i in range(len(arrayN)):
  #   for j in range(i+1, len(arrayN)):
  #     if arrayN[i] > arrayN[j]:
  #       temp = arrayN[i]
  #       arrayN[i] = arrayN[j]
  #       arrayN[j] = temp
   ######################time complexity---------------O(n^2) time complxity grows quadratically
   #######################space complexity ------------O(n) space complexity is constant
  # selection sort
  # while len(arrayN):
  #   minValue = min(arrayN)
  #   resArray.append(minValue)
  #   arrayN.remove(minValue)

  # return resArray
  ###########################time complexity ----------O(n) time complexity grows linearly
  ###########################space complexity ----------O(1) space complexity is constant

  return arrayN

print(numSort([5,8,2,6,74,1,5,8, 82]))