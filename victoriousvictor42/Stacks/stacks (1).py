# -*- coding: utf-8 -*-
"""stacks.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kzs_4zOfc7-xBC7_E9v_yNAOlWSK09rl

## I am not comfortable with C-sharp. Thats why I am having problems with question 1.

## Write a program that reads a String and reverses the String using Stack Push and Pop operations
"""

# function to create an empty stack
# it will initialize size of stack as 0
def create_stack():
  stack=[]
  return stack

# function to determine the size of the stack
def size(stack):
  return len(stack)

# Stack is empty if the size is 0
def is_empty(stack):
  if size(stack) == 0:
    return true

# function to add an item to stack
# it increases size by 1
def push(stack, item):
  stack.append(item)

# function to remove an item from stack
# it decreases size by 1
def pop(stack):
  if is_empty(stack): return
  return stack.pop()

# A stack based function to reverse a string
def reverse(string):
  n = len(string)
 
  # create an empty stack
  stack = create_stack()
  
  # Push all characters of string to stack
  for i in range(0,n,1):
    push(stack, string[i])

  # making the string empty since all characters are saved in stack
  string=''
 
  # pop all characters of string and put them back to string
  for i in range(0,n,1):
    string+=pop(stack)
  
  return string

# Testing the functions
string = 'Programming'
string = reverse(string)
print('Reversed string is', string)

"""##A bracket is considered to be any one of the following characters: (, ), {, }, [, or ]. Two brackets are considered to be a matched pair if the an opening bracket (i.e., (, [, or {) occurs to the left of a closing bracket (i.e., ), ], or }) of the exact same type. There are three types of matched pairs of brackets: [], {}, and ().

A matching pair of brackets is not balanced if the set of brackets it encloses are not matched. For example, {[(])} is not balanced because the contents in between { and } are not balanced. The pair of square brackets encloses a single, unbalanced opening bracket, (, and the pair of parentheses encloses a single, unbalanced closing square bracket, ].

By this logic, we say a sequence of brackets is balanced if the following conditions are met:

It contains no unmatched brackets.
The subset of brackets enclosed within the confines of a matched pair of brackets is also a matched pair of brackets.
Given strings of brackets, write a function that determines whether each sequence of brackets is balanced. If a string is balanced, return YES. Otherwise, return NO.

"""

# Function to check for balanced brackets
def are_brackets_balanced(expr):
  stack = []

  # Traversing the Expression
  for char in expr:
    if char in ['(', '{', '[']:

      # Push the element in the stack
      stack.append(char)
    else:
      
      # if current chharacter is not opening bracket, then it must be closing.
      # there fore the stack cannot be open at this point
      if not stack:
        return False
      current_char = stack.pop()
      if current_char == '(':
        if char != ")":
          return False
      if current_char == '{':
        if char != '}':
          return False
      if current_char == '[':
        if char != ']':
          return False
  
  # check if the stack is empty
  if stack:
    return False
  return True

# Driver code
if __name__ == "__main__":
  expr = "{()}[]"

  # Function call
  if are_brackets_balanced(expr):
    print('Yes')
  else:
    print('NO')

